ext/groonga/rb-grn.hにあるRB_GRN_MAJOR_VERSIONなどの数値を見ての最新バージョンを確かめる。


NEWS.rdoc, NEWS.ja.rdocに、前回のリリース時から現在までの変更点を、
$ git log -p --reverse (最新バージョン)..
としてgitのlogを見ながらまとめる。

プロジェクトページ（html/index.html、html/index.html.ja）のrroongaの項にある最新バージョンとリリース日をそれぞれ確認したバージョン番号と今日の日付に更新する。


  $ rake release:info:update OLD_VERSION=1.2.5 OLD_RELEASE_DATE=2011-07-29 RELEASE_DATE=2011-08-29

アップロード用のgemパッケージを下のようにコマンドを打ってビルドする。
rroongaの場合、ruby1.9.1ではパースできないオブジェクトがあるためruby1.8で作成する。
$ ruby1.8 -S rake build

そのgemパッケージの動作を確認するため、下記コマンドを打ってローカル環境にインストールする。
（これは1.9でよい）
$ gem1.9.1 install pkg/rroonga-VERSION.gem --user-install

インストールが成功したら、パッケージをインストールしたディレクトリに移動して、テストを実行し動作を確認する。
makeする必要がないためNO_MAKE=yesをつけて抑止する。
$ NO_MAKE=yes ruby1.9.1 test/run-test.rb


タグを打ってpushする。

$ rake tag
$ git push --tags

とする。

うっかり、
$ rake release
やった場合は、タグの頭にvがついてしまうので、

$ git tag -d vVERSION
$ git push origin :refs/tags/vVERSION

してタグを一度消してから上記作業をする。

アップロードする。

rubygems.orgにアップロードするには、

$ ruby1.8 -S rake gemcutter:release

をする。

rubyforgeにアップロードするには、

$ ruby1.8 -S rake publish
$ ruby1.8 -S rake html:publish

をする。

いちどもrubyforgeにアップロードしてない場合、

$ rubyforge --setup

をしてユーザの設定をする。

メーリングリストにリリースしたよメールを流す。
rubyforgeの最新ニュースを更新する。

ext/groonga/rb-grn.hにある、RB_GRN_MAJOR_VERSIONなどの値を次回アップデート時の
バージョンの値に変更する。
