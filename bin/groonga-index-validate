#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#
# Copyright (C) 2013  Kouhei Sutou <kou@clear-code.com>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License version 2.1 as published by the Free Software Foundation.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

require "ostruct"
require "optparse"

require "groonga"

options = OpenStruct.new

option_parser = OptionParser.new do |parser|
  parser.banner += " DB_PATH INDEX_NAME"
end
args = option_parser.parse!(ARGV)

if args.size != 2
  puts(option_parser)
  exit(false)
end
db_path, index_name = args

Groonga::Database.open(db_path) do |database|
  index = Groonga[index_name]
  lexicon = index.table
  index.sources.each do |source|
    unless source.vector?
      puts("only vector column is supported for now.")
      exit(false)
    end
    source.table.each do |record|
      record_id = record.id
      values = source[record.id]
      values.each do |value|
        table_cursor_options = {
          :min => value.key,
          :max => value.key,
        }
        lexicon.open_cursor(table_cursor_options) do |table_cursor|
          index.open_cursor(table_cursor) do |cursor|
            found_posting = cursor.any? do |posting|
              record_id == posting.record_id
            end
            unless found_posting
              puts("[#{source.name}][#{record.record_id}] " +
                     "not found posting for <#{value.key}>")
              exit(false)
            end
          end
        end
      end
    end
  end
end
